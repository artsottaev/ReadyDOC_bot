import os
import re
import logging
import asyncio
import tempfile
import traceback
import datetime
import difflib
import httpx
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import (
    Message, 
    FSInputFile, 
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from openai import AsyncOpenAI
from dotenv import load_dotenv
from docx import Document
from redis.asyncio import Redis
from natasha import (
    Doc,
    Segmenter,
    NewsEmbedding,
    NewsMorphTagger,
    NewsSyntaxParser,
    NewsNERTagger
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BotApplication:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.redis = None
        self.openai_client = None
        self.states = None
        self.current_chat_id = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Natasha
        self.segmenter = Segmenter()
        self.emb = NewsEmbedding()
        self.morph_tagger = NewsMorphTagger(self.emb)
        self.syntax_parser = NewsSyntaxParser(self.emb)
        self.ner_tagger = NewsNERTagger(self.emb)

    async def initialize(self):
        os.environ.pop("HTTP_PROXY", None)
        os.environ.pop("HTTPS_PROXY", None)
        os.environ.pop("ALL_PROXY", None)

        BOT_TOKEN = os.getenv("BOT_TOKEN")
        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        REDIS_URL = os.getenv("REDIS_URL")

        if not all([BOT_TOKEN, OPENAI_API_KEY, REDIS_URL]):
            raise EnvironmentError(
                "–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
                "BOT_TOKEN, OPENAI_API_KEY, REDIS_URL"
            )

        self.openai_client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                proxies=None,
                timeout=30.0,
                limits=httpx.Limits(
                    max_connections=10,
                    max_keepalive_connections=2
                )
            )
        )

        self.redis = Redis.from_url(
            REDIS_URL,
            socket_timeout=10,
            socket_connect_timeout=5,
            retry_on_timeout=True,
            decode_responses=True,
            health_check_interval=30
        )
        
        if not await self.redis.ping():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")

        storage = RedisStorage(redis=self.redis)
        self.bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher(storage=storage)

        class DocGenState(StatesGroup):
            waiting_for_initial_input = State()
            waiting_for_special_terms = State()
            current_variable = State()
        
        self.states = DocGenState
        self.register_handlers()

    def extract_entities(self, text: str) -> dict:
        doc = Doc(text)
        doc.segment(self.segmenter)
        doc.tag_morph(self.morph_tagger)
        doc.parse_syntax(self.syntax_parser)
        doc.tag_ner(self.ner_tagger)
        
        organisations = []
        names = []
        
        for span in doc.spans:
            if span.type == "ORG":
                organisations.append(span.text)
            elif span.type == "PER":
                names.append(span.text)
        
        return {
            'organisations': organisations,
            'names': names
        }

    async def identify_roles(self, document_text: str) -> dict:
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        try:
            response = await self.generate_gpt_response(
                system_prompt="""–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
                –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                    "roles": {
                        "–†–æ–ª—å1": ["–¢–ò–ü_–î–ê–ù–ù–´–•_1", "–¢–ò–ü_–î–ê–ù–ù–´–•_2", ...],
                        "–†–æ–ª—å2": ["–¢–ò–ü_–î–ê–ù–ù–´–•_1", ...]
                    }
                }
                –ü—Ä–∏–º–µ—Ä: 
                {
                    "roles": {
                        "–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å": ["–ù–ê–ó–í–ê–ù–ò–ï_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò", "–ò–ù–ù", "–ê–î–†–ï–°"],
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä": ["–§–ò–û", "–ü–ê–°–ü–û–†–¢"]
                    }
                }""",
                user_prompt=f"–î–æ–∫—É–º–µ–Ω—Ç:\n{document_text}"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                import json
                return json.loads(json_match.group(0))
            return {"roles": {}}
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π: %s", e)
            return {"roles": {}}

    async def map_variable_to_question(self, var_name: str, context: str, role_info: dict) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        role = None
        for role_name, fields in role_info.get("roles", {}).items():
            if var_name in fields:
                role = role_name
                break
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if "–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {f'–¥–ª—è {role}' if role else ''}"
        elif "—Ñ–∏–æ" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û {f'–¥–ª—è {role}' if role else ''} (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á')"
        elif "—Ç–µ–ª–µ—Ñ–æ–Ω" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω {f'–¥–ª—è {role}' if role else ''} –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
        elif "–∞–¥—Ä–µ—Å" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å {f'–¥–ª—è {role}' if role else ''} (—Å –∏–Ω–¥–µ–∫—Å–æ–º)"
        elif "–∏–Ω–Ω" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù {f'–¥–ª—è {role}' if role else ''} (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)"
        elif "–¥–∞—Ç–∞" in var_name.lower():
            return f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É {f'–¥–ª—è {role}' if role else ''} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
        
        # –û–±—â–∏–π —Å–ª—É—á–∞–π
        name = var_name.replace("_", " ").lower()
        return f"–í–≤–µ–¥–∏—Ç–µ {name}{f' –¥–ª—è {role}' if role else ''}"

    async def validate_inn(self, inn: str):
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(
                    f"https://service.nalog.ru/inn-proc.do?inn={inn}",
                    timeout=10
                )
                return response.status_code == 200
            except Exception:
                return False

    @asynccontextmanager
    async def show_loading(self, chat_id: int, action: str = ChatAction.TYPING):
        self.current_chat_id = chat_id
        stop_event = asyncio.Event()
        
        async def loading_animation():
            while not stop_event.is_set():
                await self.bot.send_chat_action(chat_id, action)
                await asyncio.sleep(4.9)
        
        loader_task = asyncio.create_task(loading_animation())
        try:
            yield
        finally:
            stop_event.set()
            await loader_task
            self.current_chat_id = None

    def register_handlers(self):
        @self.dp.message(F.text == "/start")
        async def cmd_start(message: Message, state: FSMContext):
            try:
                await state.clear()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "<i>–ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞ –º–µ–∂–¥—É –ò–ü –∏ –û–û–û –Ω–∞ –≥–æ–¥</i>"
                )
                await state.set_state(self.states.waiting_for_initial_input)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ /start: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @self.dp.message(self.states.waiting_for_initial_input)
        async def handle_description(message: Message, state: FSMContext):
            try:
                if len(message.text) > 3000:
                    await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –£–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                    return

                await state.update_data(initial_text=message.text)
                
                async with self.show_loading(message.chat.id, ChatAction.UPLOAD_DOCUMENT):
                    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                    document = await self.generate_gpt_response(
                        system_prompt="""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. 
                        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–π:
                        - –ù–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ù–ê–ó–í–ê–ù–ò–ï_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò_1]
                        - –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü: [–§–ò–û_1]
                        - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: [–¢–ï–õ–ï–§–û–ù_1], [–ê–î–†–ï–°_1]
                        - –î—Ä—É–≥–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: [–ò–ù–ù_1], [–ü–ê–°–ü–û–†–¢_1]""",
                        user_prompt=f"–°–æ—Å—Ç–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{message.text}"
                    )

                filename = f"draft_{message.from_user.id}.docx"
                path = self.save_docx(document, filename)
                
                await state.update_data(document_text=document)
                await message.answer_document(FSInputFile(path))
                await message.answer(
                    "üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.\n"
                    "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è? –ù–∞–ø–∏—à–∏ –∏—Ö –∏–ª–∏ '–Ω–µ—Ç'."
                )
                await state.set_state(self.states.waiting_for_special_terms)
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.message(self.states.waiting_for_special_terms)
        async def handle_additions(message: Message, state: FSMContext):
            try:
                data = await state.get_data()
                base_text = data.get("document_text", "")

                if message.text.strip().lower() == "–Ω–µ—Ç":
                    await self.start_variable_filling(message, state)
                    return

                async with self.show_loading(message.chat.id, ChatAction.TYPING):
                    await message.answer("üîß –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                    updated_doc = await self.generate_gpt_response(
                        system_prompt="–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í–Ω–æ—Å–∏ –ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å.",
                        user_prompt=f"–î–æ–±–∞–≤—å —É—Å–ª–æ–≤–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç:\n{message.text}\n\n–î–æ–∫—É–º–µ–Ω—Ç:\n{base_text}"
                    )

                await state.update_data(document_text=updated_doc)
                await self.start_variable_filling(message, state)
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.callback_query(F.data == "skip_variable")
        async def handle_skip_variable(callback: types.CallbackQuery, state: FSMContext):
            data = await state.get_data()
            index = data['current_variable_index'] + 1
            await state.update_data(current_variable_index=index)
            await callback.message.delete()
            await self.ask_next_variable(callback.message, state)

        @self.dp.callback_query(F.data == "dont_know")
        async def handle_dont_know(callback: types.CallbackQuery, state: FSMContext):
            data = await state.get_data()
            current_var = data['variables'][data['current_variable_index']]
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            suggestions = {
                "–¥–∞—Ç–∞": datetime.datetime.now().strftime("%d.%m.%Y"),
                "—Ç–µ–ª–µ—Ñ–æ–Ω": "+79990001122",
                "–∏–Ω–Ω": "1234567890" if "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" in current_var.lower() else "123456789012",
                "–ø–∞—Å–ø–æ—Ä—Ç": "4510 123456 –≤—ã–¥–∞–Ω –û–í–î –≥. –ú–æ—Å–∫–≤—ã 01.01.2020"
            }
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            for pattern, value in suggestions.items():
                if pattern in current_var.lower():
                    await callback.message.answer(
                        f"‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
                        f"<code>{value}</code>\n\n"
                        f"–ü–æ–∑–∂–µ –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ!"
                    )
                    return
            
            await callback.message.answer(
                "‚ö†Ô∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, "
                "–≤–≤–µ–¥–∏—Ç–µ <code>–ù–ï–¢ –î–ê–ù–ù–´–•</code> –∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∑–∂–µ"
            )

        @self.dp.message(self.states.current_variable)
        async def handle_variable_input(message: Message, state: FSMContext):
            data = await state.get_data()
            variables = data['variables']
            index = data['current_variable_index']
            current_var = variables[index]
            
            value = message.text
            error = None

            if current_var.startswith('–ò–ù–ù'):
                if not (value.isdigit() and len(value) in (10, 12)):
                    error = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)"
                elif not await self.validate_inn(value):
                    error = "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ò–ù–ù (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞)"
            
            elif current_var.startswith('–¢–ï–õ–ï–§–û–ù'):
                if not re.match(r'^\+7\d{10}$', value):
                    error = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79998887766"
            
            elif current_var.startswith('–î–ê–¢–ê'):
                try:
                    datetime.datetime.strptime(value, '%d.%m.%Y')
                except ValueError:
                    error = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
            
            elif current_var.startswith('–ü–ê–°–ü–û–†–¢'):
                if not re.match(r'^\d{4} \d{6}$', value):
                    error = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü—Ä–∏–º–µ—Ä: 4510 123456"
            
            if error:
                await message.answer(error)
                return

            filled = data['filled_variables']
            filled[current_var] = value
            await state.update_data(
                filled_variables=filled,
                current_variable_index=index + 1
            )
            await self.ask_next_variable(message, state)

    async def start_variable_filling(self, message: Message, state: FSMContext):
        data = await state.get_data()
        document_text = data['document_text']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        role_info = await self.identify_roles(document_text)
        logger.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏: %s", role_info)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        all_vars = list(set(re.findall(r'\[(.*?)\]', document_text)))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —Ä–æ–ª—è–º
        grouped_vars = {}
        for var in all_vars:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π —Ä–æ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            role = "–û–±—â–∏–µ"
            for role_name, fields in role_info.get("roles", {}).items():
                if var in fields:
                    role = role_name
                    break
                    
            if role not in grouped_vars:
                grouped_vars[role] = []
            grouped_vars[role].append(var)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –≥—Ä—É–ø–ø
        ordered_vars = []
        var_descriptions = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        if "–û–±—â–∏–µ" in grouped_vars:
            for var in grouped_vars["–û–±—â–∏–µ"]:
                ordered_vars.append(var)
                var_descriptions[var] = await self.map_variable_to_question(var, document_text, role_info)
        
        # –ó–∞—Ç–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–æ–ª–µ–π
        for role, vars_list in grouped_vars.items():
            if role == "–û–±—â–∏–µ":
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ordered_vars.append(f"---{role}---")
            var_descriptions[f"---{role}---"] = f"üîπ {role}"
            
            for var in vars_list:
                ordered_vars.append(var)
                var_descriptions[var] = await self.map_variable_to_question(var, document_text, role_info)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        logger.info("–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: %s", ordered_vars)
        
        await state.update_data(
            variables=ordered_vars,
            var_descriptions=var_descriptions,
            filled_variables={},
            current_variable_index=0
        )
        await self.ask_next_variable(message, state)

    async def ask_next_variable(self, message: Message, state: FSMContext):
        data = await state.get_data()
        variables = data['variables']
        var_descriptions = data['var_descriptions']
        index = data['current_variable_index']
        
        if index >= len(variables):
            await self.finalize_document(message, state)
            return
            
        current_var = variables[index]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã
        if current_var.startswith("---"):
            await message.answer(f"<b>{var_descriptions[current_var]}</b>")
            await state.update_data(current_variable_index=index + 1)
            await self.ask_next_variable(message, state)
            return
            
        description = var_descriptions[current_var]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_variable")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ –∑–Ω–∞—é"
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚ùì –ù–µ –∑–Ω–∞—é", callback_data="dont_know")
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])
        
        await state.set_state(self.states.current_variable)
        await message.answer(
            f"‚úçÔ∏è {description}:",
            reply_markup=keyboard
        )

    async def finalize_document(self, message: Message, state: FSMContext):
        data = await state.get_data()
        document_text = data['document_text']
        filled_vars = data['filled_variables']
        
        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var in data['variables']:
            if var.startswith("---"):
                continue
                
            if var in filled_vars:
                document_text = re.sub(
                    rf'\[{re.escape(var)}\]', 
                    filled_vars[var], 
                    document_text
                )
        
        async with self.show_loading(message.chat.id, ChatAction.UPLOAD_DOCUMENT):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–∏–∫—Å
            reviewed_doc = await self.auto_review_and_fix(document_text)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            missing_vars = set(re.findall(r'\[(.*?)\]', reviewed_doc))
            if missing_vars:
                await message.answer("‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        
        filename = f"final_{message.from_user.id}.docx"
        path = self.save_docx(reviewed_doc, filename)
        
        await message.answer_document(FSInputFile(path))
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        await state.clear()

        if os.path.exists(path):
            os.unlink(path)

    async def auto_review_and_fix(self, document: str) -> str:
        try:
            async with self.show_loading(self.current_chat_id, ChatAction.TYPING):
                reviewed = await self.generate_gpt_response(
                    system_prompt="""–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞:
                    1. –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                    2. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —É—Å–ª–æ–≤–∏—è
                    3. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
                    –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –≤–µ—Ä–Ω–∏ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç""",
                    user_prompt=f"–ü—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç:\n\n{document}"
                )
            
            if reviewed != document:
                diff = difflib.unified_diff(
                    document.splitlines(), 
                    reviewed.splitlines(),
                    fromfile='original',
                    tofile='modified'
                )
                logger.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n%s", '\n'.join(diff))
            
            return reviewed
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: %s", e)
            return document

    async def generate_gpt_response(self, system_prompt: str, user_prompt: str) -> str:
        try:
            async with self.show_loading(self.current_chat_id, ChatAction.TYPING):
                response = await self.openai_client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.2,
                    max_tokens=4000,
                    response_format={"type": "text"}
                )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ OpenAI: %s", e)
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def save_docx(self, text: str, filename: str) -> str:
        try:
            doc = Document()
            for para in text.split("\n"):
                if para.strip():
                    doc.add_paragraph(para)
            
            temp_dir = tempfile.gettempdir()
            filepath = os.path.join(temp_dir, filename)
            doc.save(filepath)
            return filepath
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: %s", e)
            raise

    async def shutdown(self):
        try:
            if self.redis:
                await self.redis.close()
            if self.bot:
                await self.bot.session.close()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %s", e)

    async def run(self):
        await self.initialize()
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
        finally:
            await self.shutdown()

if __name__ == "__main__":
    app = BotApplication()
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)