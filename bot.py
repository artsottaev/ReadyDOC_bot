import os
import re
import logging
import asyncio
import tempfile
import traceback
import datetime
import httpx
import json
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from openai import AsyncOpenAI
from dotenv import load_dotenv
from docx import Document
from redis.asyncio import Redis
from natasha import Doc, Segmenter, NewsEmbedding, NewsNERTagger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BotApplication:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.redis = None
        self.openai_client = None
        self.states = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Natasha
        self.segmenter = Segmenter()
        self.emb = NewsEmbedding()
        self.ner_tagger = NewsNERTagger(self.emb)

    async def initialize(self):
        os.environ.pop("HTTP_PROXY", None)
        os.environ.pop("HTTPS_PROXY", None)
        os.environ.pop("ALL_PROXY", None)

        BOT_TOKEN = os.getenv("BOT_TOKEN")
        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        REDIS_URL = os.getenv("REDIS_URL")

        if not all([BOT_TOKEN, OPENAI_API_KEY, REDIS_URL]):
            raise EnvironmentError(
                "–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
                "BOT_TOKEN, OPENAI_API_KEY, REDIS_URL"
            )

        self.openai_client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                proxies=None,
                timeout=30.0,
                limits=httpx.Limits(
                    max_connections=10,
                    max_keepalive_connections=2
                )
            )
        )

        self.redis = Redis.from_url(
            REDIS_URL,
            socket_timeout=10,
            socket_connect_timeout=5,
            retry_on_timeout=True,
            decode_responses=True,
            health_check_interval=30
        )
        
        if not await self.redis.ping():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")

        storage = RedisStorage(redis=self.redis)
        self.bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher(storage=storage)

        class DocGenState(StatesGroup):
            waiting_for_initial_input = State()
            waiting_for_rent_details = State()  # –î–µ—Ç–∞–ª–∏ –∞—Ä–µ–Ω–¥—ã
            waiting_for_parties_info = State()
            current_variable = State()
            document_review = State()
            waiting_for_special_terms = State()
            waiting_for_additional_clauses = State()  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        
        self.states = DocGenState
        self.register_handlers()

    def extract_entities(self, text: str) -> dict:
        doc = Doc(text)
        doc.segment(self.segmenter)
        doc.tag_ner(self.ner_tagger)
        
        organisations = []
        for span in doc.spans:
            if span.type == "ORG":
                org_name = span.normal if span.normal else span.text
                organisations.append(org_name)
        
        return {'organisations': organisations}

    async def identify_roles(self, document_text: str) -> dict:
        try:
            response = await self.generate_gpt_response(
                system_prompt="""–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
                –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                    "roles": {
                        "–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å": {
                            "fields": ["–¢–ò–ü_–õ–ò–¶–ê", "–ü–ê–°–ü–û–†–¢–ù–´–ï_–î–ê–ù–ù–´–ï", "–ò–ù–ù", "–û–ì–†–ù–ò–ü_–ò–õ–ò_–û–ì–†–ù", "–ë–ê–ù–ö–û–í–°–ö–ò–ï_–†–ï–ö–í–ò–ó–ò–¢–´"]
                        },
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä": {
                            "fields": ["–¢–ò–ü_–õ–ò–¶–ê", "–ü–ê–°–ü–û–†–¢–ù–´–ï_–î–ê–ù–ù–´–ï", "–ò–ù–ù", "–û–ì–†–ù–ò–ü_–ò–õ–ò_–û–ì–†–ù", "–ë–ê–ù–ö–û–í–°–ö–ò–ï_–†–ï–ö–í–ò–ó–ò–¢–´"]
                        }
                    },
                    "field_descriptions": {
                        "–¢–ò–ü_–õ–ò–¶–ê": "–¢–∏–ø –ª–∏—Ü–∞ (—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, –ò–ü, –û–û–û)",
                        "–ü–õ–û–©–ê–î–¨": "–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –∫–≤.–º.",
                        "–ö–ê–î–ê–°–¢–†–û–í–´–ô_–ù–û–ú–ï–†": "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è",
                        "–ê–†–ï–ù–î–ù–ê–Ø_–ü–õ–ê–¢–ê": "–°—É–º–º–∞ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã",
                        "–°–†–û–ö_–ê–†–ï–ù–î–´": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
                        "–î–ê–¢–ê_–ù–ê–ß–ê–õ–ê": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã",
                        "–î–ê–¢–ê_–û–ö–û–ù–ß–ê–ù–ò–Ø": "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã",
                        "–°–¢–ê–í–ö–ê_–ù–î–°": "–°—Ç–∞–≤–∫–∞ –ù–î–° (%)",
                        "–ö–û–ú–ú–£–ù–ê–õ–¨–ù–´–ï_–ü–õ–ê–¢–ï–ñ–ò": "–ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
                        "–î–ï–ü–û–ó–ò–¢": "–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞"
                    }
                }""",
                user_prompt=f"–î–æ–∫—É–º–µ–Ω—Ç:\n{document_text}",
                chat_id=None
            )
            
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(0))
            return {"roles": {}, "field_descriptions": {}}
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π: %s", e)
            return {"roles": {}, "field_descriptions": {}}

    def map_variable_to_question(self, var_name: str, role_info: dict) -> str:
        role = None
        for role_name, role_data in role_info.get("roles", {}).items():
            if var_name in role_data.get("fields", []):
                role = role_name
                break
        
        description = role_info.get("field_descriptions", {}).get(var_name, var_name.replace("_", " ").lower())
        
        if role:
            return f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>{description}</b> –¥–ª—è <b>{role}</b>:"
        return f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>{description}</b>:"

    def validate_inn(self, inn: str) -> bool:
        return inn.isdigit() and len(inn) in (10, 12)
    
    def num2words(self, num: int) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ –ø—Ä–æ–ø–∏—Å–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        units = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å']
        teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', 
                '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å']
        tens = ['', '', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', 
               '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ']
        hundreds = ['', '—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', 
                   '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç']
        
        def _convert(n):
            if n < 10:
                return units[n]
            elif 10 <= n < 20:
                return teens[n-10]
            elif 20 <= n < 100:
                return tens[n//10] + (' ' + units[n%10] if n%10 !=0 else '')
            elif 100 <= n < 1000:
                return hundreds[n//100] + (' ' + _convert(n%100) if n%100 !=0 else '')
            return ''
        
        return _convert(num).strip()

    @asynccontextmanager
    async def show_loading(self, chat_id: int, action: str = ChatAction.TYPING):
        if chat_id is None:
            yield
            return
            
        stop_event = asyncio.Event()
        
        async def loading_animation():
            while not stop_event.is_set():
                try:
                    await self.bot.send_chat_action(chat_id, action)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: %s", e)
                await asyncio.sleep(4.9)
        
        loader_task = asyncio.create_task(loading_animation())
        try:
            yield
        finally:
            stop_event.set()
            try:
                await loader_task
            except:
                pass

    def register_handlers(self):
        @self.dp.message(F.text == "/start")
        async def cmd_start(message: Message, state: FSMContext):
            try:
                await state.clear()
                await message.answer(
                    "üè¢ <b>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>\n\n"
                    "–Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n"
                    "- –ö–æ—Ñ–µ–π–Ω–∏, –º–∞–≥–∞–∑–∏–Ω–∞, —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã\n"
                    "- –û—Ñ–∏—Å–∞ –∏–ª–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞\n"
                    "- –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –¥–æ–≥–æ–≤–æ—Ä –≤–∞–º –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "<i>–ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞ 30 –º¬≤ –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ 1 –≥–æ–¥</i>"
                )
                await state.set_state(self.states.waiting_for_initial_input)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ /start: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @self.dp.message(self.states.waiting_for_initial_input)
        async def handle_description(message: Message, state: FSMContext):
            try:
                if len(message.text) > 3000:
                    await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –£–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                    return

                await state.update_data(initial_text=message.text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –∞—Ä–µ–Ω–¥–µ
                is_rental = any(keyword in message.text.lower() for keyword in 
                               ["–∞—Ä–µ–Ω–¥", "—Å—ä–µ–º", "–ø–æ–º–µ—â–µ–Ω", "–ø–ª–æ—â–∞–¥", "–æ—Ñ–∏—Å", "–º–∞–≥–∞–∑–∏–Ω", "–∫–∞—Ñ–µ", "—Å–∞–ª–æ–Ω"])
                
                await state.update_data(is_rental=is_rental)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
                business_type = "other"
                text_lower = message.text.lower()
                if any(kw in text_lower for kw in ["–∫–∞—Ñ–µ", "–∫–æ—Ñ–µ–π–Ω", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "—Å—Ç–æ–ª–æ–≤", "–±–∞—Ä"]):
                    business_type = "cafe"
                elif any(kw in text_lower for kw in ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ—Ä–≥–æ–≤", "—Ä–æ–∑–Ω–∏—á", "–±—É—Ç–∏–∫"]):
                    business_type = "shop"
                elif any(kw in text_lower for kw in ["—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "–Ω–æ–≥—Ç–µ–≤", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥"]):
                    business_type = "beauty"
                
                await state.update_data(business_type=business_type)
                
                if is_rental:
                    await message.answer(
                        "üè¢ <b>–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∞—Ä–µ–Ω–¥—ã:</b>\n\n"
                        "1. <b>–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:</b>\n"
                        "   - –û—Ñ–∏—Å–Ω–æ–µ\n   - –¢–æ—Ä–≥–æ–≤–æ–µ\n   - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ\n   - –°–∫–ª–∞–¥—Å–∫–æ–µ\n"
                        "2. <b>–ü–ª–æ—â–∞–¥—å:</b> (–≤ –∫–≤.–º.)\n"
                        "3. <b>–ú–µ–±–µ–ª—å/—Ç–µ—Ö–Ω–∏–∫–∞:</b> (–¥–∞/–Ω–µ—Ç)\n"
                        "4. <b>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è:</b> (–û–°–ù/–£–°–ù/–ü–∞—Ç–µ–Ω—Ç)\n"
                        "5. <b>–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è:</b> (–¥–µ–ø–æ–∑–∏—Ç, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, —Å—É–±–∞—Ä–µ–Ω–¥–∞)\n\n"
                        "<i>–ü—Ä–∏–º–µ—Ä: –û—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ 35 –º¬≤, –±–µ–∑ –º–µ–±–µ–ª–∏, –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –Ω–∞ –£–°–ù, "
                        "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞—Ä–µ–Ω–¥—É, –¥–µ–ø–æ–∑–∏—Ç 2 –º–µ—Å—è—Ü–∞</i>"
                    )
                    await state.set_state(self.states.waiting_for_rent_details)
                else:
                    await message.answer(
                        "üë• <b>–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞:</b>\n\n"
                        "<i>–ü—Ä–∏–º–µ—Ä:\n–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å: –û–û–û '–†–æ–º–∞—à–∫–∞'\n"
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (–ò–ü)</i>"
                    )
                    await state.set_state(self.states.waiting_for_parties_info)
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.message(self.states.waiting_for_rent_details)
        async def handle_rent_details(message: Message, state: FSMContext):
            try:
                rent_details = message.text
                await state.update_data(rent_details=rent_details)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–µ–Ω–¥—ã
                async with self.show_loading(message.chat.id, ChatAction.TYPING):
                    rental_params = await self.extract_rental_params(rent_details)
                    await state.update_data(rental_params=rental_params)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if not rental_params.get("property_type") or not rental_params.get("area"):
                        await message.answer(
                            "‚ö†Ô∏è <b>–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º:\n"
                            "- –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è\n"
                            "- –ü–ª–æ—â–∞–¥—å\n\n"
                            "<i>–ü—Ä–∏–º–µ—Ä: –û—Ñ–∏—Å 50 –º¬≤, –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –Ω–∞ –£–°–ù</i>"
                        )
                        return
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–ª–æ–≥–∞–º
                    tax_system = rental_params.get("tax_system", "").upper()
                    tax_advice = ""
                    if tax_system == "–£–°–ù":
                        tax_advice = "‚úÖ –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –Ω–∞ –£–°–ù: –ù–î–° –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è"
                    elif tax_system == "–û–°–ù":
                        tax_advice = "‚ö†Ô∏è –ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –Ω–∞ –û–°–ù: –í–∫–ª—é—á–∏—Ç–µ –ù–î–° –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
                    else:
                        tax_advice = "‚ÑπÔ∏è –£—Ç–æ—á–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è"
                    
                    await message.answer(
                        f"üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–µ–Ω–¥—ã:</b>\n"
                        f"–¢–∏–ø: {rental_params.get('property_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                        f"–ü–ª–æ—â–∞–¥—å: {rental_params.get('area', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤\n"
                        f"–ú–µ–±–µ–ª—å: {rental_params.get('furnished', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                        f"–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ: {tax_system}\n\n"
                        f"{tax_advice}"
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ—Ä–æ–Ω–∞—Ö
                    await message.answer(
                        "üë• <b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞:</b>\n\n"
                        "<b>–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å:</b>\n"
                        "- –§–ò–û/–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
                        "- –¢–∏–ø –ª–∏—Ü–∞ (—Ñ–∏–∑–ª–∏—Ü–æ, –ò–ü, –û–û–û)\n"
                        "\n<b>–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:</b>\n"
                        "- –§–ò–û/–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
                        "- –¢–∏–ø –ª–∏—Ü–∞\n\n"
                        "<i>–ü—Ä–∏–º–µ—Ä:\n–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å: –ò–ü –°–∏–¥–æ—Ä–æ–≤ –ê.–í.\n"
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: –û–û–û '–í–µ–∫—Ç–æ—Ä'</i>"
                    )
                    await state.set_state(self.states.waiting_for_parties_info)
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∞—Ä–µ–Ω–¥—ã: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∞—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.message(self.states.waiting_for_parties_info)
        async def handle_parties_info(message: Message, state: FSMContext):
            try:
                parties_text = message.text
                
                # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
                if len(parties_text) < 20 or ':' not in parties_text:
                    await message.answer(
                        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "<code>–†–æ–ª—å1: –ù–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û</code>\n"
                        "<code>–†–æ–ª—å2: –ù–∞–∑–≤–∞–Ω–∏–µ/–§–ò–û</code>\n\n"
                        "–ü—Ä–∏–º–µ—Ä:\n"
                        "<i>–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å: –û–û–û '–†–æ–º–∞—à–∫–∞'\n"
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</i>"
                    )
                    return
                    
                await state.update_data(parties_text=parties_text)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ—Ä–æ–Ω–∞—Ö
                async with self.show_loading(message.chat.id, Chat