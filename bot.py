import os
import re
import logging
import asyncio
import tempfile
import traceback
import datetime
import difflib
import httpx
import json
from contextlib import asynccontextmanager, nullcontext
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.enums import ParseMode, ChatAction
from aiogram.types import (
    Message, 
    FSInputFile, 
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from openai import AsyncOpenAI
from dotenv import load_dotenv
from docx import Document
from redis.asyncio import Redis
from natasha import (
    Doc,
    Segmenter,
    NewsEmbedding,
    NewsMorphTagger,
    NewsSyntaxParser,
    NewsNERTagger
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BotApplication:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.redis = None
        self.openai_client = None
        self.states = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Natasha
        self.segmenter = Segmenter()
        self.emb = NewsEmbedding()
        self.morph_tagger = NewsMorphTagger(self.emb)
        self.syntax_parser = NewsSyntaxParser(self.emb)
        self.ner_tagger = NewsNERTagger(self.emb)

    async def initialize(self):
        os.environ.pop("HTTP_PROXY", None)
        os.environ.pop("HTTPS_PROXY", None)
        os.environ.pop("ALL_PROXY", None)

        BOT_TOKEN = os.getenv("BOT_TOKEN")
        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        REDIS_URL = os.getenv("REDIS_URL")

        if not all([BOT_TOKEN, OPENAI_API_KEY, REDIS_URL]):
            raise EnvironmentError(
                "–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
                "BOT_TOKEN, OPENAI_API_KEY, REDIS_URL"
            )

        self.openai_client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                proxies=None,
                timeout=30.0,
                limits=httpx.Limits(
                    max_connections=10,
                    max_keepalive_connections=2
                )
            )
        )

        self.redis = Redis.from_url(
            REDIS_URL,
            socket_timeout=10,
            socket_connect_timeout=5,
            retry_on_timeout=True,
            decode_responses=True,
            health_check_interval=30
        )
        
        if not await self.redis.ping():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")

        storage = RedisStorage(redis=self.redis)
        self.bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher(storage=storage)

        class DocGenState(StatesGroup):
            waiting_for_initial_input = State()
            current_variable = State()
            document_review = State()
            waiting_for_special_terms = State()
        
        self.states = DocGenState
        self.register_handlers()

    def extract_entities(self, text: str) -> dict:
        doc = Doc(text)
        doc.segment(self.segmenter)
        doc.tag_ner(self.ner_tagger)  # –¢–æ–ª—å–∫–æ NER-—Ä–∞–∑–º–µ—Ç–∫–∞
        
        organisations = []
        
        for span in doc.spans:
            if span.type == "ORG":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                org_name = span.text
                if span.normal:
                    org_name = span.normal
                organisations.append(org_name)
        
        return {'organisations': organisations}

    async def identify_roles(self, document_text: str) -> dict:
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        try:
            response = await self.generate_gpt_response(
                system_prompt="""–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–∞ –∏ –∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
                –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                    "roles": {
                        "–†–æ–ª—å1": {
                            "fields": ["–¢–ò–ü_–î–ê–ù–ù–´–•_1", "–¢–ò–ü_–î–ê–ù–ù–´–•_2"]
                        },
                        "–†–æ–ª—å2": {
                            "fields": ["–¢–ò–ü_–î–ê–ù–ù–´–•_3"]
                        }
                    },
                    "field_descriptions": {
                        "–¢–ò–ü_–î–ê–ù–ù–´–•_1": "–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    }
                }
                –ü—Ä–∏–º–µ—Ä: 
                {
                    "roles": {
                        "–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å": {
                            "fields": ["–ù–ê–ó–í–ê–ù–ò–ï_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò", "–ò–ù–ù", "–ê–î–†–ï–°"]
                        },
                        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä": {
                            "fields": ["–§–ò–û", "–ü–ê–°–ü–û–†–¢"]
                        }
                    },
                    "field_descriptions": {
                        "–ù–ê–ó–í–ê–ù–ò–ï_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò": "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
                        "–§–ò–û": "–ø–æ–ª–Ω–æ–µ –∏–º—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"
                    }
                }""",
                user_prompt=f"–î–æ–∫—É–º–µ–Ω—Ç:\n{document_text}",
                chat_id=None
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(0))
            return {"roles": {}, "field_descriptions": {}}
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π: %s", e)
            return {"roles": {}, "field_descriptions": {}}

    def map_variable_to_question(self, var_name: str, role_info: dict) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
        # –ò—â–µ–º –∫ –∫–∞–∫–æ–π —Ä–æ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª–µ
        role = None
        for role_name, role_data in role_info.get("roles", {}).items():
            if var_name in role_data.get("fields", []):
                role = role_name
                break
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ field_descriptions
        description = role_info.get("field_descriptions", {}).get(var_name, var_name.replace("_", " ").lower())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if role:
            return f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>{description}</b> –¥–ª—è —Ä–æ–ª–∏ <b>{role}</b>:"
        return f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>{description}</b>:"

    def validate_inn(self, inn: str) -> bool:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç)"""
        return inn.isdigit() and len(inn) in (10, 12)

    @asynccontextmanager
    async def show_loading(self, chat_id: int, action: str = ChatAction.TYPING):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        if chat_id is None:
            yield
            return
            
        stop_event = asyncio.Event()
        
        async def loading_animation():
            while not stop_event.is_set():
                try:
                    await self.bot.send_chat_action(chat_id, action)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è: %s", e)
                await asyncio.sleep(4.9)
        
        loader_task = asyncio.create_task(loading_animation())
        try:
            yield
        finally:
            stop_event.set()
            try:
                await loader_task
            except:
                pass

    def register_handlers(self):
        @self.dp.message(F.text == "/start")
        async def cmd_start(message: Message, state: FSMContext):
            try:
                await state.clear()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "<i>–ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞ –º–µ–∂–¥—É –ò–ü –∏ –û–û–û –Ω–∞ –≥–æ–¥</i>"
                )
                await state.set_state(self.states.waiting_for_initial_input)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ /start: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @self.dp.message(self.states.waiting_for_initial_input)
        async def handle_description(message: Message, state: FSMContext):
            try:
                if len(message.text) > 3000:
                    await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –£–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                    return

                await state.update_data(initial_text=message.text)
                
                async with self.show_loading(message.chat.id, ChatAction.UPLOAD_DOCUMENT):
                    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                    
                    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
                    document = await self.generate_gpt_response(
                        system_prompt="""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. 
                        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
                        1. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–π —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–û–û–û/–ò–ü/–§–õ) –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        2. –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–≥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: –°—Ç–æ—Ä–æ–Ω–∞ 1, –°—Ç–æ—Ä–æ–Ω–∞ 2
                        3. –î–ª—è –í–°–ï–• —Å—Ç–æ—Ä–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–π –û–î–ò–ù–ê–ö–û–í–´–ï —Ç–∏–ø—ã —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:
                           [–ù–ê–ó–í–ê–ù–ò–ï_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò] –¥–ª—è —é—Ä. –ª–∏—Ü
                           [–§–ò–û] –¥–ª—è —Ñ–∏–∑. –ª–∏—Ü
                           [–ü–ê–°–ü–û–†–¢–ù–´–ï_–î–ê–ù–ù–´–ï] –¥–ª—è —Ñ–∏–∑. –ª–∏—Ü
                        4. –í—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
                           [–ò–ù–ù], [–ê–î–†–ï–°], [–¢–ï–õ–ï–§–û–ù], [–≠–õ–ï–ö–¢–†–û–ù–ù–ê–Ø_–ü–û–ß–¢–ê]
                        5. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–π —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏!""",
                        user_prompt=f"–°–æ—Å—Ç–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é:\n\n{message.text}",
                        chat_id=message.chat.id
                    )

                filename = f"draft_{message.from_user.id}.docx"
                path = self.save_docx(document, filename)
                
                await state.update_data(document_text=document)
                await message.answer_document(FSInputFile(path))
                await message.answer(
                    "üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –≥–æ—Ç–æ–≤! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã."
                )
                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
                await self.start_variable_filling(message, state)
                
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.callback_query(F.data == "skip_variable")
        async def handle_skip_variable(callback: types.CallbackQuery, state: FSMContext):
            data = await state.get_data()
            index = data['current_variable_index'] + 1
            await state.update_data(current_variable_index=index)
            await callback.message.delete()
            await self.ask_next_variable(callback.message, state)

        @self.dp.callback_query(F.data == "dont_know")
        async def handle_dont_know(callback: types.CallbackQuery, state: FSMContext):
            data = await state.get_data()
            current_var = data['variables'][data['current_variable_index']]
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            suggestions = {
                "–¥–∞—Ç–∞": datetime.datetime.now().strftime("%d.%m.%Y"),
                "—Ç–µ–ª–µ—Ñ–æ–Ω": "+79990001122",
                "–∏–Ω–Ω": "1234567890" if "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" in current_var.lower() else "123456789012",
                "–ø–∞—Å–ø–æ—Ä—Ç": "4510 123456",
                "—Å—É–º–º–∞": "10 000",
                "—Å—Ä–æ–∫": "1 –≥–æ–¥",
                "–∞–¥—Ä–µ—Å": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1",
                "–æ–≥—Ä–Ω": "1234567890123"
            }
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            for pattern, value in suggestions.items():
                if pattern in current_var.lower():
                    await callback.message.answer(
                        f"‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
                        f"<code>{value}</code>\n\n"
                        f"–ü–æ–∑–∂–µ –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ!"
                    )
                    return
            
            await callback.message.answer(
                "‚ö†Ô∏è –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, "
                "–≤–≤–µ–¥–∏—Ç–µ <code>–ù–ï–¢ –î–ê–ù–ù–´–•</code> –∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∑–∂–µ"
            )

        @self.dp.message(self.states.current_variable)
        async def handle_variable_input(message: Message, state: FSMContext):
            data = await state.get_data()
            variables = data['variables']
            index = data['current_variable_index']
            current_var = variables[index]
            
            value = message.text
            error = None
            detailed_error = ""

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            current_role = "–¥–æ–∫—É–º–µ–Ω—Ç–∞"
            role_info = data.get('role_info', {})
            for role_name, role_data in role_info.get("roles", {}).items():
                if current_var in role_data.get("fields", []):
                    current_role = role_name
                    break

            if "–∏–Ω–Ω" in current_var.lower():
                if not self.validate_inn(value):
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù\n"
                        f"–≠—Ç–æ—Ç –ò–ù–ù –Ω—É–∂–µ–Ω –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–§–æ—Ä–º–∞—Ç:\n"
                        "- 10 —Ü–∏—Ñ—Ä –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π\n"
                        "- 12 —Ü–∏—Ñ—Ä –¥–ª—è –ò–ü/—Ñ–∏–∑–ª–∏—Ü\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>1234567890</code> –∏–ª–∏ <code>123456789012</code>"
                    )
            
            elif "—Ç–µ–ª–µ—Ñ–æ–Ω" in current_var.lower():
                if not re.match(r'^\+7\d{10}$', value):
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                        f"–≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–§–æ—Ä–º–∞—Ç: +7 –∏ 10 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>+79998887766</code>"
                    )
            
            elif "–¥–∞—Ç–∞" in current_var.lower():
                try:
                    datetime.datetime.strptime(value, '%d.%m.%Y')
                except ValueError:
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n"
                        f"–≠—Ç–∞ –¥–∞—Ç–∞ –Ω—É–∂–Ω–∞ –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>01.01.2023</code>"
                    )
            
            elif "–ø–∞—Å–ø–æ—Ä—Ç" in current_var.lower():
                if not re.match(r'^\d{4} \d{6}$', value):
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
                        f"–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–§–æ—Ä–º–∞—Ç: —Å–µ—Ä–∏—è (4 —Ü–∏—Ñ—Ä—ã) –∏ –Ω–æ–º–µ—Ä (6 —Ü–∏—Ñ—Ä) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>4510 123456</code>"
                    )
            
            elif "—Å—É–º–º–∞" in current_var.lower():
                if not re.match(r'^[\d\s]+$', value):
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã\n"
                        f"–≠—Ç–∞ —Å—É–º–º–∞ –Ω—É–∂–Ω–∞ –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã (–º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)\n"
                        "–ü—Ä–∏–º–µ—Ä—ã: <code>10000</code> –∏–ª–∏ <code>15 000</code>"
                    )
            
            elif "–æ–≥—Ä–Ω" in current_var.lower():
                if not re.match(r'^\d{13}$', value):
                    detailed_error = (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –û–ì–†–ù\n"
                        f"–≠—Ç–æ—Ç –û–ì–†–ù –Ω—É–∂–µ–Ω –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 13 —Ü–∏—Ñ—Ä\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>1234567890123</code>"
                    )
            
            elif "–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" in current_var.lower():
                if not re.match(r'^[\w\s"-]{5,}$', value, re.IGNORECASE | re.UNICODE):
                    detailed_error = (
                        "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ\n"
                        f"–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –¥–ª—è: <b>{current_role}</b>\n\n"
                        "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤\n"
                        "–ü—Ä–∏–º–µ—Ä: <code>–û–û–û '–†–æ–º–∞—à–∫–∞'</code>"
                    )
            
            if detailed_error:
                await message.answer(detailed_error)
                return

            filled = data['filled_variables']
            filled[current_var] = value
            await state.update_data(
                filled_variables=filled,
                current_variable_index=index + 1
            )
            await self.ask_next_variable(message, state)

        @self.dp.callback_query(F.data == "confirm_document")
        async def handle_confirm_document(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.delete()
            await self.send_final_document(callback.message, state)

        @self.dp.callback_query(F.data == "edit_document")
        async def handle_edit_document(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.delete()
            await state.set_state(self.states.waiting_for_initial_input)
            await callback.message.answer("üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")

        @self.dp.callback_query(F.data == "add_terms")
        async def handle_add_terms(callback: types.CallbackQuery, state: FSMContext):
            await callback.message.answer(
                "‚úçÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–ª–∏ '–Ω–µ—Ç':"
            )
            await state.set_state(self.states.waiting_for_special_terms)

        @self.dp.message(self.states.waiting_for_special_terms)
        async def handle_final_additions(message: Message, state: FSMContext):
            try:
                data = await state.get_data()
                
                if message.text.strip().lower() == "–Ω–µ—Ç":
                    await self.send_final_document(message, state)
                    return
                
                base_text = data.get("final_document", "")
                
                async with self.show_loading(message.chat.id, ChatAction.TYPING):
                    await message.answer("üîß –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç...")
                    updated_doc = await self.generate_gpt_response(
                        system_prompt="–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í–Ω–µ—Å–∏ –ø—Ä–∞–≤–∫–∏, –¥–æ–±–∞–≤–∏–≤ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                        user_prompt=f"–î–æ–±–∞–≤—å —É—Å–ª–æ–≤–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç:\n{message.text}\n\n–î–æ–∫—É–º–µ–Ω—Ç:\n{base_text}",
                        chat_id=message.chat.id
                    )

                filename = f"final_{message.from_user.id}.docx"
                path = self.save_docx(updated_doc, filename)
                
                await message.answer_document(FSInputFile(path))
                await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                await state.clear()
                
                if os.path.exists(path):
                    os.unlink(path)
                    
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s\n%s", e, traceback.format_exc())
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

    async def start_variable_filling(self, message: Message, state: FSMContext):
        data = await state.get_data()
        document_text = data['document_text']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        role_info = await self.identify_roles(document_text)
        logger.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏: %s", json.dumps(role_info, indent=2, ensure_ascii=False))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        all_vars = list(set(re.findall(r'\[(.*?)\]', document_text)))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ —Ä–æ–ª—è–º
        grouped_vars = {}
        for var in all_vars:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π —Ä–æ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            role = "–û–±—â–∏–µ"
            for role_name, role_data in role_info.get("roles", {}).items():
                if var in role_data.get("fields", []):
                    role = role_name
                    break
                    
            if role not in grouped_vars:
                grouped_vars[role] = []
            grouped_vars[role].append(var)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –≥—Ä—É–ø–ø
        ordered_vars = []
        var_descriptions = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        if "–û–±—â–∏–µ" in grouped_vars:
            for var in grouped_vars["–û–±—â–∏–µ"]:
                ordered_vars.append(var)
                var_descriptions[var] = self.map_variable_to_question(var, role_info)
        
        # –ó–∞—Ç–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–æ–ª–µ–π
        for role, vars_list in grouped_vars.items():
            if role == "–û–±—â–∏–µ":
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ordered_vars.append(f"---{role}---")
            var_descriptions[f"---{role}---"] = f"üîπ <b>{role}</b>"
            
            for var in vars_list:
                ordered_vars.append(var)
                var_descriptions[var] = self.map_variable_to_question(var, role_info)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        logger.info("–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: %s", ordered_vars)
        
        await state.update_data(
            variables=ordered_vars,
            var_descriptions=var_descriptions,
            filled_variables={},
            current_variable_index=0,
            role_info=role_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
        )
        await self.ask_next_variable(message, state)

    async def ask_next_variable(self, message: Message, state: FSMContext):
        data = await state.get_data()
        variables = data['variables']
        var_descriptions = data['var_descriptions']
        index = data['current_variable_index']
        
        if index >= len(variables):
            await self.prepare_final_document(message, state)
            return
            
        current_var = variables[index]
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã
        if current_var.startswith("---"):
            await message.answer(var_descriptions[current_var])
            await state.update_data(current_variable_index=index + 1)
            await self.ask_next_variable(message, state)
            return
            
        description = var_descriptions[current_var]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_variable")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ –∑–Ω–∞—é"
        keyboard_buttons.append(
            InlineKeyboardButton(text="‚ùì –ù–µ –∑–Ω–∞—é", callback_data="dont_know")
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])
        
        await state.set_state(self.states.current_variable)
        await message.answer(
            description,
            reply_markup=keyboard
        )

    async def prepare_final_document(self, message: Message, state: FSMContext):
        data = await state.get_data()
        document_text = data['document_text']
        filled_vars = data['filled_variables']
        
        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var in data['variables']:
            if var.startswith("---"):
                continue
                
            if var in filled_vars:
                document_text = re.sub(
                    rf'\[{re.escape(var)}\]', 
                    filled_vars[var], 
                    document_text
                )
        
        async with self.show_loading(message.chat.id, ChatAction.UPLOAD_DOCUMENT):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–∏–∫—Å
            reviewed_doc = await self.auto_review_and_fix(document_text, message.chat.id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            missing_vars = set(re.findall(r'\[(.*?)\]', reviewed_doc))
            if missing_vars:
                await message.answer(
                    f"‚ö†Ô∏è –í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_vars)}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            filename = f"prefinal_{message.from_user.id}.docx"
            path = self.save_docx(reviewed_doc, filename)
            
            await state.update_data(
                final_document=reviewed_doc,
                document_path=path
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer_document(FSInputFile(path))
            
            # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø—Ä–æ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirm_document"),
                    InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="add_terms")
                ],
                [
                    InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_document")
                ]
            ])
            
            await message.answer(
                "üìù –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ:\n"
                "- –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é\n"
                "- –î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è\n"
                "- –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω—É–ª—è",
                reply_markup=keyboard
            )
            await state.set_state(self.states.document_review)

    async def send_final_document(self, message: Message, state: FSMContext):
        data = await state.get_data()
        document_text = data.get('final_document', '')
        
        if not document_text:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π DOCX
        filename = f"–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π_–¥–æ–∫—É–º–µ–Ω—Ç_{datetime.datetime.now().strftime('%d%m%Y')}.docx"
        final_path = self.save_docx(document_text, filename)
        
        await message.answer_document(FSInputFile(final_path))
        await message.answer(
            "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n"
            "2. –ü–æ–∫–∞–∑–∞—Ç—å —é—Ä–∏—Å—Ç—É\n"
            "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é"
        )
        await state.clear()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(final_path):
            os.unlink(final_path)
        
        temp_path = data.get('document_path', '')
        if temp_path and os.path.exists(temp_path):
            os.unlink(temp_path)

    async def auto_review_and_fix(self, document: str, chat_id: int) -> str:
        try:
            async with self.show_loading(chat_id, ChatAction.TYPING):
                # –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                reviewed = await self.generate_gpt_response(
                    system_prompt="""–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –í–ù–ï–°–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–ü–†–Ø–ú–£–Æ –í –¢–ï–ö–°–¢:
                    1. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —É—Å–ª–æ–≤–∏—è
                    2. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏
                    3. –û–ø–µ—á–∞—Ç–∫–∏ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É
                    4. –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –æ–±–µ–∏—Ö —Ä–æ–ª—è—Ö)
                    5. –ù–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                    
                    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
                    - –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    - –ù–ò–ö–ê–ö–ò–• –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∑–∞–º–µ—Ç–æ–∫
                    - –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    - –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å""",
                    user_prompt=f"–ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç:\n\n{document}",
                    chat_id=chat_id
                )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç)
            if "```" in reviewed:
                reviewed = reviewed.split("```")[1]
            return reviewed.strip()
        
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: %s", e)
            return document

    async def generate_gpt_response(self, system_prompt: str, user_prompt: str, chat_id: int) -> str:
        try:
            if chat_id:
                async with self.show_loading(chat_id, ChatAction.TYPING):
                    response = await self.openai_client.chat.completions.create(
                        model="gpt-3.5-turbo-0125",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": user_prompt}
                        ],
                        temperature=0.2,
                        max_tokens=3000
                    )
            else:
                response = await self.openai_client.chat.completions.create(
                    model="gpt-3.5-turbo-0125",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.2,
                    max_tokens=3000
                )
                
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ OpenAI: %s", e)
            return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def save_docx(self, text: str, filename: str) -> str:
        try:
            doc = Document()
            for para in text.split("\n"):
                if para.strip():
                    doc.add_paragraph(para)
            
            temp_dir = tempfile.gettempdir()
            filepath = os.path.join(temp_dir, filename)
            doc.save(filepath)
            return filepath
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: %s", e)
            raise

    async def shutdown(self):
        try:
            if self.redis:
                await self.redis.close()
            if self.bot:
                await self.bot.session.close()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %s", e)

    async def run(self):
        await self.initialize()
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e)
        finally:
            await self.shutdown()

if __name__ == "__main__":
    app = BotApplication()
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical("–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)