import os
import logging
import asyncio
import tempfile
import traceback
import httpx
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile
from openai import AsyncOpenAI
from dotenv import load_dotenv
from docx import Document
from redis.asyncio import Redis, RedisError, ConnectionError as RedisConnectionError

# –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("ALL_PROXY", None)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
REDIS_URL = os.getenv("REDIS_URL")

if not all([BOT_TOKEN, OPENAI_API_KEY, REDIS_URL]):
    raise EnvironmentError(
        "–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
        "BOT_TOKEN, OPENAI_API_KEY, REDIS_URL"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = AsyncOpenAI(
    api_key=OPENAI_API_KEY,
    http_client=httpx.AsyncClient(
        proxies=None,
        timeout=30.0,
        limits=httpx.Limits(
            max_connections=10,
            max_keepalive_connections=2
        )
    )
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
try:
    redis_client = Redis.from_url(
        REDIS_URL,
        ssl=True,
        ssl_cert_reqs=None,
        socket_timeout=10,
        socket_connect_timeout=5,
        retry_on_timeout=True,
        decode_responses=True,
        health_check_interval=30
    )
    storage = RedisStorage(redis=redis_client)
except (RedisError, RedisConnectionError) as e:
    logger.critical(f"Redis connection error: {str(e)}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DocGenState(StatesGroup):
    waiting_for_initial_input = State()
    waiting_for_special_terms = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis
async def check_redis_connection():
    try:
        if await redis_client.ping():
            logger.info("‚úÖ Redis connection verified")
            return True
        logger.error("‚ùå Redis ping failed")
        return False
    except Exception as e:
        logger.critical(f"Redis connection failed: {str(e)}")
        raise

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI
async def generate_gpt_response(system_prompt: str, user_prompt: str) -> str:
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.3,
            max_tokens=3000
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI error: {e}\n{traceback.format_exc()}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –†–∞–±–æ—Ç–∞ —Å DOCX —Ñ–∞–π–ª–∞–º–∏
def save_docx(text: str, filename: str) -> str:
    try:
        doc = Document()
        for para in text.split("\n"):
            if para.strip():
                doc.add_paragraph(para)
        
        temp_dir = tempfile.gettempdir()
        filepath = os.path.join(temp_dir, filename)
        doc.save(filepath)
        return filepath
    except Exception as e:
        logger.error(f"DOCX creation error: {e}\n{traceback.format_exc()}")
        raise

async def safe_send_document(message: Message, path: str):
    try:
        await message.answer_document(FSInputFile(path))
    finally:
        if os.path.exists(path):
            try:
                os.unlink(path)
            except Exception as e:
                logger.warning(f"File deletion error {path}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<i>–ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞ –º–µ–∂–¥—É –ò–ü –∏ –û–û–û –Ω–∞ –≥–æ–¥</i>"
        )
        await state.set_state(DocGenState.waiting_for_initial_input)
    except Exception as e:
        logger.error(f"/start error: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(DocGenState.waiting_for_initial_input)
async def handle_description(message: Message, state: FSMContext):
    try:
        if len(message.text) > 3000:
            await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –£–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        await state.update_data(initial_text=message.text)
        await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

        document = await generate_gpt_response(
            system_prompt="–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.",
            user_prompt=f"–°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É. –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n\"{message.text}\""
        )

        filename = f"draft_{message.from_user.id}.docx"
        path = save_docx(document, filename)
        
        await state.update_data(document_text=document)
        await message.answer("üìÑ –í–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:")
        await safe_send_document(message, path)
        await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è? –ù–∞–ø–∏—à–∏ –∏—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–Ω–µ—Ç</b>.")
        await state.set_state(DocGenState.waiting_for_special_terms)
        
    except Exception as e:
        logger.error(f"Description processing error: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.message(DocGenState.waiting_for_special_terms)
async def handle_additions(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        base_text = data.get("document_text", "")

        if message.text.strip().lower() == "–Ω–µ—Ç":
            await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –£–¥–∞—á–∏!")
            await state.clear()
            return

        await message.answer("üîß –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        updated_doc = await generate_gpt_response(
            system_prompt="–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å.",
            user_prompt=(
                "–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç. –î–æ–±–∞–≤—å –≤ –Ω–µ–≥–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è, "
                f"—Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n–£—Å–ª–æ–≤–∏—è: {message.text}\n\n–î–æ–∫—É–º–µ–Ω—Ç:\n{base_text}"
            )
        )

        filename = f"final_{message.from_user.id}.docx"
        path = save_docx(updated_doc, filename)
        
        await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å —É—á—ë—Ç–æ–º —É—Å–ª–æ–≤–∏–π:")
        await safe_send_document(message, path)
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Additions processing error: {e}\n{traceback.format_exc()}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ª–æ–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        logger.info("Starting bot...")
        asyncio.run(check_redis_connection())
        asyncio.run(dp.start_polling(bot))
    except KeyboardInterrupt:
        logger.info("Bot stopped gracefully")
    except Exception as e:
        logger.critical(f"Fatal error: {str(e)}\n{traceback.format_exc()}")