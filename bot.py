import os
import logging
import asyncio
import tempfile
import traceback
import datetime
import httpx
from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from openai import AsyncOpenAI
from dotenv import load_dotenv
from docx import Document
from redis.asyncio import Redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class BotApplication:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.redis = None
        self.openai_client = None
        self.states = None

    async def initialize(self):
        # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        os.environ.pop("HTTP_PROXY", None)
        os.environ.pop("HTTPS_PROXY", None)
        os.environ.pop("ALL_PROXY", None)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        REDIS_URL = os.getenv("REDIS_URL")

        if not all([BOT_TOKEN, OPENAI_API_KEY, REDIS_URL]):
            raise EnvironmentError(
                "–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
                "BOT_TOKEN, OPENAI_API_KEY, REDIS_URL"
            )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        self.openai_client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                proxies=None,
                timeout=30.0,
                limits=httpx.Limits(
                    max_connections=10,
                    max_keepalive_connections=2
                )
            )
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        self.redis = Redis.from_url(
            REDIS_URL,
            socket_timeout=10,
            socket_connect_timeout=5,
            retry_on_timeout=True,
            decode_responses=True,
            health_check_interval=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        if not await self.redis.ping():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")

        storage = RedisStorage(redis=self.redis)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher(storage=storage)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        class DocGenState(StatesGroup):
            waiting_for_initial_input = State()
            waiting_for_special_terms = State()
            contract_place = State()
            contract_party1 = State()
            contract_party2 = State()
            contract_date = State()
            contract_signatory1 = State()
            contract_signatory2 = State()
        
        self.states = DocGenState

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()

    def register_handlers(self):
        @self.dp.message(F.text == "/start")
        async def cmd_start(message: Message, state: FSMContext):
            try:
                await state.clear()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "<i>–ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ—Ñ–∏—Å–∞ –º–µ–∂–¥—É –ò–ü –∏ –û–û–û –Ω–∞ –≥–æ–¥</i>"
                )
                await state.set_state(self.states.waiting_for_initial_input)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}\n{traceback.format_exc()}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @self.dp.message(self.states.waiting_for_initial_input)
        async def handle_description(message: Message, state: FSMContext):
            try:
                if len(message.text) > 3000:
                    await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –£–∫–æ—Ä–æ—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                    return

                await state.update_data(initial_text=message.text)
                await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

                document = await self.generate_gpt_response(
                    system_prompt="–¢—ã –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç. –°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.",
                    user_prompt=f"–°–æ—Å—Ç–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –ø—Ä–∞–≤—É. –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n\"{message.text}\""
                )

                filename = f"draft_{message.from_user.id}.docx"
                path = self.save_docx(document, filename)
                
                await state.update_data(document_text=document)
                await message.answer_document(FSInputFile(path))
                await message.answer(
                    "üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.\n"
                    "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è? –ù–∞–ø–∏—à–∏ –∏—Ö –∏–ª–∏ –Ω–∞–ø–∏—à–∏ <b>–Ω–µ—Ç</b>."
                )
                await state.set_state(self.states.waiting_for_special_terms)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}\n{traceback.format_exc()}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        @self.dp.message(self.states.waiting_for_special_terms)
        async def handle_additions(message: Message, state: FSMContext):
            try:
                data = await state.get_data()
                base_text = data.get("document_text", "")

                if message.text.strip().lower() == "–Ω–µ—Ç":
                    await self.request_contract_details(message, state)
                    return

                await message.answer("üîß –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                updated_doc = await self.generate_gpt_response(
                    system_prompt="–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –í–Ω–æ—Å–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å.",
                    user_prompt=(
                        "–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç. –î–æ–±–∞–≤—å –≤ –Ω–µ–≥–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è, "
                        f"—Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n–£—Å–ª–æ–≤–∏—è: {message.text}\n\n–î–æ–∫—É–º–µ–Ω—Ç:\n{base_text}"
                    )
                )

                await state.update_data(document_text=updated_doc)
                await self.request_contract_details(message, state)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ª–æ–≤–∏–π: {e}\n{traceback.format_exc()}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ª–æ–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

        async def request_contract_details(self, message: Message, state: FSMContext):
            await state.set_state(self.states.contract_place)
            await message.answer(
                "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–≥–æ—Ä–æ–¥):",
                reply_markup=ReplyKeyboardRemove()
            )

        @self.dp.message(self.states.contract_place)
        async def handle_place(message: Message, state: FSMContext):
            await state.update_data(place=message.text)
            await state.set_state(self.states.contract_party1)
            await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –°—Ç–æ—Ä–æ–Ω—ã 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–û–û '–†–æ–º–∞—à–∫–∞'):")

        @self.dp.message(self.states.contract_party1)
        async def handle_party1(message: Message, state: FSMContext):
            await state.update_data(party1=message.text)
            await state.set_state(self.states.contract_party2)
            await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –°—Ç–æ—Ä–æ–Ω—ã 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–ü –ò–≤–∞–Ω–æ–≤ –ò.–ò.):")

        @self.dp.message(self.states.contract_party2)
        async def handle_party2(message: Message, state: FSMContext):
            await state.update_data(party2=message.text)
            await state.set_state(self.states.contract_date)
            await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

        @self.dp.message(self.states.contract_date)
        async def handle_date(message: Message, state: FSMContext):
            try:
                datetime.datetime.strptime(message.text, '%d.%m.%Y')
                await state.update_data(date=message.text)
                await state.set_state(self.states.contract_signatory1)
                await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –æ—Ç –°—Ç–æ—Ä–æ–Ω—ã 1:")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

        @self.dp.message(self.states.contract_signatory1)
        async def handle_signatory1(message: Message, state: FSMContext):
            await state.update_data(signatory1=message.text)
            await state.set_state(self.states.contract_signatory2)
            await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –æ—Ç –°—Ç–æ—Ä–æ–Ω—ã 2:")

        @self.dp.message(self.states.contract_signatory2)
        async def handle_signatory2(message: Message, state: FSMContext):
            try:
                await state.update_data(signatory2=message.text)
                data = await state.get_data()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                await message.answer("üîÑ –°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                final_doc = self.fill_contract_template(
                    data['document_text'],
                    data.get('place', '______'),
                    data.get('party1', '______'),
                    data.get('party2', '______'),
                    data.get('date', '______'),
                    data.get('signatory1', '______'),
                    data.get('signatory2', '______')
                )
                
                filename = f"final_{message.from_user.id}.docx"
                path = self.save_docx(final_doc, filename)
                
                await message.answer_document(FSInputFile(path))
                await message.answer(
                    "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—é!\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                )
                await state.clear()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}\n{traceback.format_exc()}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()

            finally:
                if os.path.exists(path):
                    os.unlink(path)

    def fill_contract_template(self, text: str, place: str, party1: str, party2: str, 
                             date: str, signatory1: str, signatory2: str) -> str:
        replacements = {
            '[–ú–ï–°–¢–û]': place,
            '[–°–¢–û–†–û–ù–ê_1]': party1,
            '[–°–¢–û–†–û–ù–ê_2]': party2,
            '[–î–ê–¢–ê]': date,
            '[–ü–û–î–ü–ò–°–ê–ù–¢_1]': signatory1,
            '[–ü–û–î–ü–ò–°–ê–ù–¢_2]': signatory2,
            '  ': ' '  # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
        }
        
        for key, value in replacements.items():
            text = text.replace(key, value)
        
        return text

    async def generate_gpt_response(self, system_prompt: str, user_prompt: str) -> str:
        try:
            system_prompt += """
            –®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:
            - –ú–µ—Å—Ç–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è: [–ú–ï–°–¢–û]
            - –°—Ç–æ—Ä–æ–Ω–∞ 1: [–°–¢–û–†–û–ù–ê_1]
            - –°—Ç–æ—Ä–æ–Ω–∞ 2: [–°–¢–û–†–û–ù–ê_2]
            - –î–∞—Ç–∞: [–î–ê–¢–ê]
            - –ü–æ–¥–ø–∏—Å—å –°—Ç–æ—Ä–æ–Ω—ã 1: ___________________/[–ü–û–î–ü–ò–°–ê–ù–¢_1]/
            - –ü–æ–¥–ø–∏—Å—å –°—Ç–æ—Ä–æ–Ω—ã 2: ___________________/[–ü–û–î–ü–ò–°–ê–ù–¢_2]/
            """
            
            response = await self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo-0125",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                max_tokens=3000
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}\n{traceback.format_exc()}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def save_docx(self, text: str, filename: str) -> str:
        try:
            doc = Document()
            for para in text.split("\n"):
                if para.strip():
                    doc.add_paragraph(para)
            
            temp_dir = tempfile.gettempdir()
            filepath = os.path.join(temp_dir, filename)
            doc.save(filepath)
            return filepath
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: {e}\n{traceback.format_exc()}")
            raise

    async def shutdown(self):
        try:
            if self.redis:
                await self.redis.close()
            if self.bot:
                await self.bot.session.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

    async def run(self):
        await self.initialize()
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
        finally:
            await self.shutdown()

if __name__ == "__main__":
    app = BotApplication()
    try:
        asyncio.run(app.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")