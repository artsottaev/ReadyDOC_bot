import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

from utils.gpt_text_gen import ask_question, generate_full_contract, legal_self_check
from utils.docgen import generate_doc_from_text

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")]
    ],
    resize_keyboard=True
)

user_data = {}

@dp.message(F.text == "/start")
async def start(message: Message):
    user_data[message.from_user.id] = {"step": "awaiting_type", "context": ""}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω?", reply_markup=main_menu)

@dp.message(F.text == "üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
async def new_doc(message: Message):
    user_data[message.from_user.id] = {"step": "awaiting_type", "context": ""}
    await message.answer("üìù –ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω? –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞, NDA, –∞—Ä–µ–Ω–¥—ã‚Ä¶")

@dp.message(F.text)
async def handle_input(message: Message):
    uid = message.from_user.id
    if uid not in user_data:
        user_data[uid] = {"step": "awaiting_type", "context": ""}

    session = user_data[uid]
    step = session["step"]
    context = session["context"]

    if step == "awaiting_type":
        session["context"] = message.text.strip()
        session["step"] = "clarifying"
        question = ask_question(session["context"])
        await message.answer(f"‚ùì {question}")
        return

    elif step == "clarifying":
        session["context"] += f"\n–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {message.text.strip()}"
        question = ask_question(session["context"])
        if "?" in question:
            await message.answer(f"‚ùì {question}")
        else:
            session["step"] = "generating"
            await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä‚Ä¶")
            text = generate_full_contract(session["context"])
            session["contract"] = text
            await message.answer("üîé –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—É‚Ä¶")
            review = legal_self_check(text)
            session["review"] = review
            if "–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" in review.lower():
                session["step"] = "ready"
                path = generate_doc_from_text(text, uid)
                await message.answer_document(open(path, "rb"), caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫–æ–Ω—É.")
            else:
                session["step"] = "ask_fix"
                await message.answer(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∏—Å–∫–∏:\n{review}\n\n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –∏—Å–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç? (–¥–∞/–Ω–µ—Ç)")

    elif step == "ask_fix":
        if message.text.lower() in ["–¥–∞", "–∏—Å–ø—Ä–∞–≤—å", "–¥–∞–≤–∞–π"]:
            session["context"] += "\n–ü—Ä–æ—Å—å–±–∞: –∏—Å–ø—Ä–∞–≤—å —Ä–∏—Å–∫–∏ –∏ –ø—Ä–∏–≤–µ–¥–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∑–∞–∫–æ–Ω–æ–º"
            fixed = generate_full_contract(session["context"])
            path = generate_doc_from_text(fixed, uid)
            await message.answer_document(open(path, "rb"), caption="‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤.")
        else:
            path = generate_doc_from_text(session["contract"], uid)
            await message.answer_document(open(path, "rb"), caption="üìé –î–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏.")
        user_data.pop(uid)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())