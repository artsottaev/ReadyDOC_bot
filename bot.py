
import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.gpt_text_gen import ask_for_missing_data, generate_full_contract, legal_self_check
from utils.docgen import generate_doc_from_text
from utils.cache_manager import cache_exists, load_from_cache, save_to_cache

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    KeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

user_sessions = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ReadyDoc ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –û–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ üëá",
        reply_markup=main_menu
    )
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def create_document(message: types.Message):
    await message.reply("üìù –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–≥–æ–≤–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç:¬ª)
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    user_sessions.pop(message.from_user.id, None)
    await message.reply("–û–∫! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª", reply_markup=main_menu)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get("step") == "awaiting_description")
async def handle_description(message: types.Message):
    user_id = message.from_user.id
    prompt = message.text.strip()
    user_sessions[user_id]["step"] = "processing"

    await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é, –º–æ–∂–Ω–æ –ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç‚Ä¶¬ª)

    if cache_exists(prompt):
        text = load_from_cache(prompt)
        await message.reply("üì¶ –ù–∞—à—ë–ª –ø–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å")
    else:
        followup = ask_for_missing_data(prompt)
        if "?" in followup:
            await message.reply(f"ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏:
{followup}")
            user_sessions[user_id] = {"step": "awaiting_clarification", "original_prompt": prompt}
            return
        else:
            text = generate_full_contract(prompt)
            save_to_cache(prompt, text)

    doc_path = generate_doc_from_text(text, user_id)
    await message.reply_document(open(doc_path, "rb"), caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.")

    check_result = legal_self_check(text)
    await message.reply(f"‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
{check_result}")

    user_sessions.pop(user_id, None)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get("step") == "awaiting_clarification")
async def handle_clarification(message: types.Message):
    user_id = message.from_user.id
    original = user_sessions[user_id].get("original_prompt", "")
    combined_prompt = f"{original}. –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {message.text.strip()}"

    await message.reply("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    text = generate_full_contract(combined_prompt)
    save_to_cache(combined_prompt, text)

    doc_path = generate_doc_from_text(text, user_id)
    await message.reply_document(open(doc_path, "rb"), caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.")

    check_result = legal_self_check(text)
    await message.reply(f"‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:
{check_result}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.reply("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")

    user_sessions.pop(user_id, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
