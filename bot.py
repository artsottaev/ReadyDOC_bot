
import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.gpt_text_gen import extract_followup_questions, generate_full_contract, legal_self_check_and_extend
from utils.docgen import generate_doc_from_text
from utils.cache_manager import cache_exists, load_from_cache, save_to_cache

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    KeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

user_sessions = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø ReadyDoc. –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–≥–æ–≤–æ—Ä —Ç–µ–±–µ –Ω—É–∂–µ–Ω.", reply_markup=main_menu)
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def create_document(message: types.Message):
    await message.reply("üìù –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω:")
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    user_sessions.pop(message.from_user.id, None)
    await message.reply("–û–∫! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª", reply_markup=main_menu)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get("step") == "awaiting_description")
async def handle_description(message: types.Message):
    user_id = message.from_user.id
    prompt = message.text.strip()
    user_sessions[user_id] = {
        "step": "asking_followups",
        "prompt": prompt,
        "answers": [],
        "questions": extract_followup_questions(prompt)
    }
    await ask_next_question(message, user_id)

async def ask_next_question(message, user_id):
    session = user_sessions[user_id]
    questions = session["questions"]
    answers = session["answers"]
    if len(answers) < len(questions):
        await message.reply(f"‚ùì {questions[len(answers)]}")
    else:
        full_prompt = (
    "–°–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§ –Ω–∞ 2025 –≥–æ–¥."
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
    f"–û–ø–∏—Å–∞–Ω–∏–µ: {session['prompt']}\n"
    f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n" + "\n".join(session["answers"])
)       
	await message.reply("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤...")
        text = generate_full_contract(full_prompt)
        text = legal_self_check_and_extend(text)
        save_to_cache(full_prompt, text)
        doc_path = generate_doc_from_text(text, user_id)
        await message.reply_document(open(doc_path, "rb"), caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        user_sessions.pop(user_id, None)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get("step") == "asking_followups")
async def handle_followup_answer(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions[user_id]
    session["answers"].append(message.text.strip())
    await ask_next_question(message, user_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
