import os
import json
import logging
import asyncio
import openai
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from docx import Document

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Google Sheets setup
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.getenv('GOOGLE_CREDS_JSON'))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs = gspread.authorize(creds)
sheet = gs.open('ReadyDoc MVP').sheet1

# Session store
user_sessions = {}

# Custom keyboard
doc_kb = ReplyKeyboardMarkup(resize_keyboard=True)
doc_kb.add(KeyboardButton("NDA"), KeyboardButton("–ê–∫—Ç"), KeyboardButton("–î–æ–≥–æ–≤–æ—Ä"))

# –ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /smartdoc
def ask_gpt(prompt_text):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. –û—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": prompt_text}
        ],
        temperature=0.3,
        max_tokens=500
    )
    return response.choices[0].message["content"]

# –ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
def extract_doc_data(prompt_text):
    system_prompt = (
        "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞–µ—à—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —à–∞–±–ª–æ–Ω—É. "
        "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –≤ JSON —Å –∫–ª—é—á–∞–º–∏: —Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞ (services, act, nda), "
        "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ—Ä–æ–Ω—ã, –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞, —Å—É–º–º–∞. –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ JSON."
    )

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_text}
        ],
        temperature=0,
        max_tokens=500
    )

    reply = completion.choices[0].message["content"]
    try:
        return json.loads(reply)
    except json.JSONDecodeError:
        return None

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî ReadyDoc.\n\n–ú–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å NDA, –∞–∫—Ç –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä.\n–ù–∞–∂–º–∏ /getdoc, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=['getdoc'])
async def getdoc(message: types.Message):
    user_sessions[message.from_user.id] = {'step': 'choose_doc'}
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω:", reply_markup=doc_kb)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'choose_doc')
async def choose_doc(message: types.Message):
    doc_map = {
        "NDA": "nda",
        "–ê–∫—Ç": "act",
        "–î–æ–≥–æ–≤–æ—Ä": "services"
    }
    doc_choice = doc_map.get(message.text.strip())
    if not doc_choice:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá", reply_markup=doc_kb)

    user_sessions[message.from_user.id] = {
        'step': 'collect',
        'doc_type': doc_choice,
        'data': {},
        'fields': ['–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ—Ä–æ–Ω—ã', '–¥–∞—Ç–∞', '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞', '—Å—É–º–º–∞']
    }
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º.\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?")

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'collect')
async def collect_data(message: types.Message):
    session = user_sessions[message.from_user.id]
    data = session['data']
    fields = session['fields']

    current_field = fields[len(data)]
    data[current_field] = message.text.strip()

    if len(data) < len(fields):
        next_field = fields[len(data)]
        prompts = {
            '–¥–∞—Ç–∞': "–ö–∞–∫–∞—è –¥–∞—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?",
            '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞': "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —É –¥–æ–≥–æ–≤–æ—Ä–∞? (–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç')",
            '—Å—É–º–º–∞': "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç (‚ÇΩ)?"
        }
        await message.reply(prompts.get(next_field, f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {next_field}:"))
    else:
        await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        await asyncio.sleep(1.5)
        doc_path = generate_doc(session['doc_type'], data, message.from_user.id)
        sheet.append_row([message.from_user.id, session['doc_type'], *data.values(), 'done'])
        await message.reply_document(open(doc_path, 'rb'))
        await message.reply("–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª. –•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /getdoc")
        user_sessions.pop(message.from_user.id)

@dp.message_handler(commands=['smartdoc'])
async def smartdoc(message: types.Message):
    await message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\"–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –º–µ–∂–¥—É –ò–ü –∏ –û–û–û\"")
    user_sessions[message.from_user.id] = {'step': 'awaiting_ai_prompt'}

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'awaiting_ai_prompt')
async def handle_ai_prompt(message: types.Message):
    prompt = message.text.strip()
    await message.reply("üîç –î—É–º–∞—é –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–º...")
    try:
        result = ask_gpt(prompt)
        await message.reply(f"üß† –í–æ—Ç —á—Ç–æ —è –ø—Ä–∏–¥—É–º–∞–ª:\n\n{result}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
    user_sessions.pop(message.from_user.id)

@dp.message_handler(commands=['autodoc'])
async def autodoc(message: types.Message):
    await message.reply("üß† –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\"–î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –º–µ–∂–¥—É –û–û–û –∏ –ò–ü, —Å—É–º–º–∞ 150 000, –¥–∞—Ç–∞ 10.05.2025\"")
    user_sessions[message.from_user.id] = {'step': 'awaiting_doc_request'}

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'awaiting_doc_request')
async def handle_doc_request(message: types.Message):
    await message.reply("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    prompt = message.text.strip()
    data = extract_doc_data(prompt)

    if not data or not all(k in data for k in ['—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ—Ä–æ–Ω—ã', '–¥–∞—Ç–∞', '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞', '—Å—É–º–º–∞']):
        await message.reply("üòï –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    doc_type = data.pop("—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞")
    doc_path = generate_doc(doc_type, data, message.from_user.id)
    sheet.append_row([message.from_user.id, doc_type, *data.values(), 'auto_generated'])
    await message.reply_document(open(doc_path, 'rb'))
    await message.reply("üìÑ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.")
    user_sessions.pop(message.from_user.id)

def generate_doc(doc_type, data, user_id):
    def normalize(value):
        if isinstance(value, dict):
            return "; ".join(f"{k}: {v}" for k, v in value.items())
        elif isinstance(value, list):
            return ", ".join(str(item) for item in value)
        return str(value)

    with open(f'templates/{doc_type}.md', encoding='utf-8') as f:
        text = f.read()

    for key, value in data.items():
        clean_value = normalize(value)
        text = text.replace(f'{{{{{key}}}}}', clean_value)

    doc = Document()
    for line in text.split('\n'):
        doc.add_paragraph(line)

    output = f'/tmp/{user_id}_{doc_type}.docx'
    doc.save(output)
    return output

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)