import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from docx import Document
from utils.gpt_text_gen import generate_full_contract
from utils.docgen import generate_doc, normalize
from utils.gpt import extract_doc_data, gpt_add_section
from utils.sheets import save_row

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    KeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
    KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
)

user_sessions = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–≥–æ–≤–æ—Ä. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ üëá\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ –º–µ–∂–¥—É –û–û–û –∏ –ò–ü –Ω–∞ 120 —Ç—ã—Å —Å 1 –º–∞—è\"",
        reply_markup=main_menu
    )
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def manual_start(message: types.Message):
    await message.reply("üìù –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–≥–æ–≤–æ—Ä –Ω—É–∂–µ–Ω:")
    user_sessions[message.from_user.id] = {"step": "awaiting_description"}

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    user_sessions.pop(message.from_user.id, None)
    await message.reply("–û–∫–µ–π! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª", reply_markup=main_menu)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get("step") == "awaiting_description")
async def handle_description(message: types.Message):
    prompt = message.text.strip()
    await message.reply("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5‚Äì10 —Å–µ–∫—É–Ω–¥.")

    try:
        contract_text = generate_full_contract(prompt)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ Word-—Ñ–∞–π–ª
        doc = Document()
        for line in contract_text.split("\n"):
            doc.add_paragraph(line)

        file_path = f"/tmp/contract_{message.from_user.id}.docx"
        doc.save(file_path)

        await message.reply_document(open(file_path, "rb"), caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.reply("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")

    user_sessions.pop(message.from_user.id, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)