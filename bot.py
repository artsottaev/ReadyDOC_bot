import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from utils.settings import BOT_TOKEN
from utils.prompts import *
from utils.gpt_text_gen import gpt_generate_text, gpt_check_missing_data
from utils.legal_checker import check_document_legality
from utils.docgen import generate_docx

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
TEXT_WELCOME = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ReadyDoc, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n–ù–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ üìë. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã."
TEXT_COLLECTING = "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∏–ª–∏ —Å–≤–æ—ë –§–ò–û –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞)."
TEXT_CLARIFYING = "üîç –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫–∞—è —Ü–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞? –ö–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å?"
TEXT_GENERATING = "‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."
TEXT_CHECKING_LEGALITY = "üßê –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§..."
TEXT_LEGAL_ISSUES = "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n\n{issues}\n\n–•–æ—Ç–∏—Ç–µ, —è –ø–æ–ø—Ä–æ–±—É—é –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å?"
TEXT_FIX_ISSUES = "üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã..."
TEXT_DOCUMENT_OK = "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!"
TEXT_DOCUMENT_READY = "üìÑ –í–æ—Ç –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç! –ú–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–∞—á–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
TEXT_THANKS = "üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å ReadyDoc! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ."
TEXT_ERROR = "üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ReadyDocFSM:
    collecting_data = "collecting_data"
    clarifying_data = "clarifying_data"
    generating_draft = "generating_draft"
    legal_check = "legal_check"
    finalizing_document = "finalizing_document"
    sending_result = "sending_result"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "typing..." —ç—Ñ—Ñ–µ–∫—Ç–∞
async def send_typing_effect(message: Message, text: str):
    await bot.send_chat_action(message.chat.id, 'typing')
    await asyncio.sleep(2)  # —ç–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.answer(text)

# –ö–Ω–æ–ø–∫–∏
def create_inline_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm")],
            [InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="fix")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
    )

# –®–∞–≥ 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
async def collect_data(message: Message):
    await send_typing_effect(message, TEXT_WELCOME)
    await message.answer(TEXT_COLLECTING)
    user_data = await dp.storage.get_data(chat_id=message.chat.id, user_id=message.from_user.id)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    user_data["company_name"] = message.text  # –ü—Ä–∏–º–µ—Ä
    await dp.storage.set_data(chat_id=message.chat.id, user_id=message.from_user.id, data=user_data)

    await message.answer(TEXT_CLARIFYING, reply_markup=create_inline_buttons())

# –®–∞–≥ 2: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def collect_clarification(message: Message):
    user_data = await dp.storage.get_data(chat_id=message.chat.id, user_id=message.from_user.id)

    clarification_question = TEXT_CLARIFYING
    await message.answer(clarification_question)

    if message.text:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
        user_data["clarified_info"] = message.text

    await dp.storage.set_data(chat_id=message.chat.id, user_id=message.from_user.id, data=user_data)

    await message.answer(TEXT_GENERATING, reply_markup=create_inline_buttons())
    await generate_draft(message)

# –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def generate_draft(message: Message):
    user_data = await dp.storage.get_data(chat_id=message.chat.id, user_id=message.from_user.id)

    try:
        document_text = await gpt_generate_text(user_data)
    except Exception:
        await message.answer(TEXT_ERROR)
        return

    await send_typing_effect(message, TEXT_CHECKING_LEGALITY)
    await legal_check(message, document_text)

# –®–∞–≥ 4: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def legal_check(message: Message, document_text: str):
    try:
        legal_issues = await check_document_legality(document_text)
    except Exception:
        await message.answer(TEXT_ERROR)
        return

    if legal_issues:
        await message.answer(TEXT_LEGAL_ISSUES.format(issues=legal_issues))
        await message.answer(TEXT_FIX_ISSUES)
        await fix_issues(message)
    else:
        await message.answer(TEXT_DOCUMENT_OK)
        await finalize_document(message, document_text)

# –®–∞–≥ 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
async def fix_issues(message: Message):
    await message.answer(TEXT_FIXING)
    await generate_draft(message)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏

# –®–∞–≥ 6: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def finalize_document(message: Message, document_text: str):
    try:
        doc_file = await generate_docx(document_text)
    except Exception:
        await message.answer(TEXT_ERROR)
        return

    await message.answer(TEXT_DOCUMENT_READY)
    await message.answer_document(doc_file)

    await message.answer(TEXT_THANKS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data in ["confirm", "fix", "cancel"])
async def process_callback(callback_query):
    action = callback_query.data
    message = callback_query.message

    if action == "confirm":
        await message.answer("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ! –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.")
        await finalize_document(message, "–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)")
    elif action == "fix":
        await message.answer("üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        await fix_issues(message)
    elif action == "cancel":
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await message.answer(TEXT_THANKS)

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(collect_data, F.text)

    # –°—Ç–∞—Ä—Ç
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())