import os
import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from docx import Document

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Google Sheets setup
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.getenv('GOOGLE_CREDS_JSON'))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs = gspread.authorize(creds)
sheet = gs.open('ReadyDoc MVP').sheet1

# Session store
user_sessions = {}

# Custom keyboard
doc_kb = ReplyKeyboardMarkup(resize_keyboard=True)
doc_kb.add(KeyboardButton("NDA"), KeyboardButton("–ê–∫—Ç"), KeyboardButton("–î–æ–≥–æ–≤–æ—Ä"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name = message.from_user.first_name or "–¥—Ä—É–≥"
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî ReadyDoc.\n\n–ú–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å NDA, –∞–∫—Ç –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä.\n–ù–∞–∂–º–∏ /getdoc, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

@dp.message_handler(commands=['getdoc'])
async def getdoc(message: types.Message):
    user_sessions[message.from_user.id] = {'step': 'choose_doc'}
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω:", reply_markup=doc_kb)

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'choose_doc')
async def choose_doc(message: types.Message):
    doc_map = {
        "NDA": "nda",
        "–ê–∫—Ç": "act",
        "–î–æ–≥–æ–≤–æ—Ä": "services"
    }
    doc_choice = doc_map.get(message.text.strip().title())
    if not doc_choice:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá", reply_markup=doc_kb)

    user_sessions[message.from_user.id] = {
        'step': 'collect',
        'doc_type': doc_choice,
        'data': {},
        'fields': [
            '–Ω–∞–∑–≤–∞–Ω–∏–µ_–∑–∞–∫–∞–∑—á–∏–∫–∞',
            '–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
            '–¥–∞—Ç–∞',
            '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞',
            '—Å—É–º–º–∞'
        ]
    }
    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω—ë–º.\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞?")

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'collect')
async def collect_data(message: types.Message):
    session = user_sessions[message.from_user.id]
    data = session['data']
    fields = session['fields']

    current_field = fields[len(data)]
    data[current_field] = message.text.strip()

    if len(data) < len(fields):
        next_field = fields[len(data)]
        prompts = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?",
            '–¥–∞—Ç–∞': "–ö–∞–∫–∞—è –¥–∞—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?",
            '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞': "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —É –¥–æ–≥–æ–≤–æ—Ä–∞? (–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç')",
            '—Å—É–º–º–∞': "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç (‚ÇΩ)?"
        }
        await message.reply(prompts.get(next_field, f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {next_field}:"))
    else:
        await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        await asyncio.sleep(1.5)
        doc_path = generate_doc(session['doc_type'], data, message.from_user.id)
        sheet.append_row([message.from_user.id, session['doc_type'], *data.values(), 'done'])
        await message.reply_document(open(doc_path, 'rb'))
        await message.reply("–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª. –•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /getdoc")
        user_sessions.pop(message.from_user.id, None)

def generate_doc(doc_type, data, user_id):
    with open(f'templates/{doc_type}.md', encoding='utf-8') as f:
        text = f.read()
    for key, value in data.items():
        text = text.replace(f'{{{{{key}}}}}', value)
    doc = Document()
    for line in text.split('\n'):
        doc.add_paragraph(line)
    output = f'/tmp/{user_id}_{doc_type}.docx'
    doc.save(output)
    return output

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)