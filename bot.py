import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram import F
from aiogram.fsm.context import FSMContext
from utils.settings import BOT_TOKEN
from utils.prompts import *
from utils.gpt_text_gen import gpt_generate_text, gpt_check_missing_data
from utils.legal_checker import check_document_legality
from utils.docgen import generate_docx

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ReadyDocFSM:
    collecting_data = "collecting_data"
    clarifying_data = "clarifying_data"
    generating_draft = "generating_draft"
    legal_check = "legal_check"
    finalizing_document = "finalizing_document"
    sending_result = "sending_result"

# –®–∞–≥ 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
@dp.message(F.text)
async def collect_data(message: Message, state: FSMContext):
    await message.answer(TEXT_COLLECTING)
    user_data = await state.get_data()

    # –ü—Ä–∏–º–µ—Ä: —Å–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    user_data["company_name"] = message.text  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä
    await state.update_data(user_data)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ç–æ—á–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
    await message.answer(TEXT_CLARIFYING)
    await collect_clarification(message)

# –®–∞–≥ 2: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async def collect_clarification(message: Message):
    user_data = await dp.storage.get_data(message.from_user.id)

    # –ü—Ä–∏–º–µ—Ä —É—Ç–æ—á–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    clarification_question = TEXT_CLARIFICATION
    await message.answer(clarification_question)

    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if message.text:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç
        user_data["clarified_info"] = message.text

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
    await message.answer(TEXT_GENERATING)
    await generate_draft(message)

# –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def generate_draft(message: Message):
    user_data = await dp.storage.get_data(message.from_user.id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GPT
    document_text = await gpt_generate_text(user_data)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    await message.answer(TEXT_CHECKING_LEGALITY)
    await legal_check(message, document_text)

# –®–∞–≥ 4: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
async def legal_check(message: Message, document_text: str):
    legal_issues = await check_document_legality(document_text)

    if legal_issues:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.answer(TEXT_LEGAL_ISSUES.format(issues=legal_issues))
        await message.answer(TEXT_FIX_ISSUES)
        await fix_issues(message)
    else:
        # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await message.answer(TEXT_DOCUMENT_OK)
        await finalize_document(message, document_text)

# –®–∞–≥ 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
async def fix_issues(message: Message):
    # –õ–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await message.answer(TEXT_FIXING)
    await generate_draft(message)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏

# –®–∞–≥ 6: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def finalize_document(message: Message, document_text: str):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .docx —Ñ–∞–π–ª–∞
    doc_file = await generate_docx(document_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(TEXT_DOCUMENT_READY)
    await message.answer_document(doc_file)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await message.answer(TEXT_THANKS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data.in_(["confirm", "fix", "cancel"]))
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    message = callback_query.message

    if action == "confirm":
        await message.answer("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ! –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.")
        await finalize_document(message, "–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)")
    elif action == "fix":
        await message.answer("üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        await fix_issues(message)
    elif action == "cancel":
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await message.answer(TEXT_THANKS)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def main():
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
