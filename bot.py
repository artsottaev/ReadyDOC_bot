import os
import json
import logging
import asyncio
import openai
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from docx import Document
from utils.docgen import generate_doc, normalize
from utils.gpt import extract_doc_data, gpt_add_section
from utils.sheets import save_row

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.getenv('GOOGLE_CREDS_JSON'))
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gs = gspread.authorize(creds)
sheet = gs.open('ReadyDoc MVP').sheet1

user_sessions = {}

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    KeyboardButton("‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
    KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
    KeyboardButton("üîÅ –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å"),
    KeyboardButton("üìÑ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
)

def normalize(value):
    if isinstance(value, dict):
        return "; ".join(f"{k}: {v}" for k, v in value.items())
    elif isinstance(value, list):
        return ", ".join(str(item) for item in value)
    return str(value)

def extract_doc_data(prompt_text):
    system_prompt = (
        "–¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –≤ JSON —Å –∫–ª—é—á–∞–º–∏: "
        "—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞ (services, act, nda), –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ—Ä–æ–Ω—ã, –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞, —Å—É–º–º–∞. "
        "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –¢–æ–ª—å–∫–æ JSON."
    )
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_text}
        ],
        temperature=0,
        max_tokens=500
    )
    reply = completion.choices[0].message["content"]
    try:
        return json.loads(reply)
    except json.JSONDecodeError:
        return None

def gpt_add_section(original_text, section_topic):
    prompt = f"–î–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü —ç—Ç–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –ø—É–Ω–∫—Ç –æ {section_topic} –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ. –î–æ–∫—É–º–µ–Ω—Ç:\n\n{original_text}"
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã —é—Ä–∏—Å—Ç. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–≥–æ–≤–æ—Ä."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.3,
        max_tokens=300
    )
    addition = completion.choices[0].message["content"]
    return original_text + "\n\n" + addition

def generate_doc(doc_type, data, user_id):
    with open(f'templates/{doc_type}.md', encoding='utf-8') as f:
        text = f.read()
    for key, value in data.items():
        text = text.replace(f'{{{{{key}}}}}', normalize(value))
    doc = Document()
    for line in text.split('\n'):
        doc.add_paragraph(line)
    output = f'/tmp/{user_id}_{doc_type}.docx'
    doc.save(output)
    return output, text

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø ReadyDoc. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def create_doc(message: types.Message):
    await message.reply("üß† –û–ø–∏—à–∏, –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω.\n–ù–∞–ø—Ä–∏–º–µ—Ä: \"–î–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –º–µ–∂–¥—É –û–û–û –∏ –ò–ü, —Å—É–º–º–∞ 150 000, –¥–∞—Ç–∞ 10.05.2025\"")
    user_sessions[message.from_user.id] = {'step': 'awaiting_doc_request'}

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'awaiting_doc_request')
async def handle_doc_request(message: types.Message):
    prompt = message.text.strip()
    await message.reply("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    data = extract_doc_data(prompt)

    if not data or not all(k in data for k in ['—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ—Ä–æ–Ω—ã', '–¥–∞—Ç–∞', '–Ω–æ–º–µ—Ä_–¥–æ–≥–æ–≤–æ—Ä–∞', '—Å—É–º–º–∞']):
        return await message.reply("üòï –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")

    doc_type = data.pop("—Ç–∏–ø_–¥–æ–∫—É–º–µ–Ω—Ç–∞")
    path, raw_text = generate_doc(doc_type, data, message.from_user.id)

    user_sessions[message.from_user.id] = {
        'last_doc_type': doc_type,
        'last_data': data,
        'last_text': raw_text
    }

    row = [str(message.from_user.id), doc_type] + [normalize(v) for v in data.values()] + ['auto']
    sheet.append_row(row)

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç", callback_data="add_section"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done")
    )

    await message.reply_document(open(path, 'rb'), caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "add_section")
async def handle_addition_request(call: types.CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.answer("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —à—Ç—Ä–∞—Ñ—ã")
    user_sessions[call.from_user.id]['step'] = 'awaiting_addition'

@dp.message_handler(lambda m: user_sessions.get(m.from_user.id, {}).get('step') == 'awaiting_addition')
async def handle_addition_input(message: types.Message):
    section = message.text.strip()
    session = user_sessions[message.from_user.id]
    base_text = session['last_text']
    new_text = gpt_add_section(base_text, section)

    session['last_text'] = new_text

    doc = Document()
    for line in new_text.split('\n'):
        doc.add_paragraph(line)
    output = f'/tmp/{message.from_user.id}_final.docx'
    doc.save(output)

    await message.reply_document(open(output, 'rb'), caption="üìÑ –ì–æ—Ç–æ–≤–æ! –ü—É–Ω–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    await message.reply("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –µ—â—ë –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å?", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_section"),
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="done")
    ))

@dp.callback_query_handler(lambda c: c.data == "done")
async def handle_done(call: types.CallbackQuery):
    await call.message.edit_reply_markup()
    await call.message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª", reply_markup=main_menu)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)